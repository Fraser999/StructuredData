var searchIndex = {};
searchIndex['structured_data'] = {"items":[[0,"","structured_data","Example of proposed Structured Data for the SAFE Network.",null,null],[0,"structured_data","","Structured Data implementation.",null,null],[3,"Data","structured_data::structured_data","Top-level type: a representation of \"Structured Data\".",null,null],[12,"fixed_attributes","","Immutable attributes which apply to the entire `Data` instance.",0,null],[12,"mutable_attributes","","Attributes which apply to the entire `Data` instance, but which can be changed with proper\nauthorisation.",0,null],[12,"versions","","The most recent (which could encompass all) versions of the `Data` instance.  Cannot be\nempty.",0,null],[3,"FixedAttributes","","Attributes of the `Data` which can never change once initially set.  These define the identity,\ntype and some of the rules the network will employ for handling the `Data`.  It can also hold\narbitrary data which will likely be meaningless to the network.",null,null],[12,"type_tag","","Identifier of the `Data` type.",1,null],[12,"id","","Identity of the piece of `Data`.",1,null],[12,"max_versions","","Maximum number of versions allowed.",1,null],[12,"min_retained_count","","Number of versions to retain when archiving a \"full\" piece of `Data` (minimum value of 1).",1,null],[12,"data","","Arbitrary, immutable, `Data`-wide information.  May be empty.",1,null],[3,"KeyAndWeight","","A representation of an owner's public key and the bias which should be given to that key when\na mutating request is received by the network.",null,null],[12,"key","","Owner's public key.",2,null],[12,"weight","","Bias given to this public key (minimum value of 1).",2,null],[3,"MutableAttributes","","Attributes of the `Data` which can be changed via a properly-authorised request to the network.\nThese define the current owner's public keys, further rules the network will employ for handling\nthe `Data` and also arbitrary data which will likely be meaningless to the network.",null,null],[12,"owner_keys","","Current owner or owners' public keys.  Cannot be empty.",3,null],[12,"min_weight_for_consensus","","Minimum total weight of signatories' keys to allow a mutation of the piece of `Data` (at\nleast one signature will be required regardless of this minimum).",3,null],[12,"expiry_date","","Coarse-grained expiry date around which time the piece of `Data` will be removed from the\nnetwork.",3,null],[12,"data","","Arbitrary, mutable, `Data`-wide information.  May be empty.",3,null],[3,"Version","","A representation of a single version.  The `index` allows provision of strict total ordering of\nthe `Version`s.  It can also hold arbitrary data specific to that particular `Version`, e.g.\nencrypted content or the name of a piece of \"Immutable Data\".",null,null],[12,"index","","Sequential number to provide strict total order of versions.",4,null],[12,"data","","Arbitrary, version-specific information.  May be empty.",4,null],[11,"fmt","","",0,{"inputs":[{"name":"data"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"fixedattributes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"keyandweight"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"mutableattributes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Data"],[3,"FixedAttributes"],[3,"KeyAndWeight"],[3,"MutableAttributes"],[3,"Version"]]};
initSearch(searchIndex);
